
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.1.0.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace MCSM {
    using System.Collections.Immutable;
    using System.Data.Common;
    using System.Text.Json;
    using System.Text.Json.Nodes;
    using Terminal.Gui;
    using Terminal.Gui.Trees;

    public partial class JsonEditor {
        private string FilePath = "";
        private TreeView<JsonNode> JsonTree = new();
        private List<JsonNode> JSON = new();
        private JsonNode rootObject;
        private JsonNode fatherObject;
        public JsonEditor() {
            InitializeComponent();
            this.ColorScheme = MainProc.DispStyle;
            JsonTree.AspectGetter = (f) => {
                if (f == rootObject) return "ROOT";
                if (f is JsonObject jo){
                    try{
                        string ret = jo.GetPropertyName();
                        return ret;
                    }catch{
                        return "unknowObject";
                    }
                }
                if (f is JsonArray ja){
                    try{
                        string ret = ja.GetPropertyName();
                        return ret;
                    }catch{
                        return "unknowArray";
                    }
                }
                if (f is JsonValue jv){
                    switch(jv.GetValueKind()){
                        case JsonValueKind.Number:
                            return jv.GetPropertyName() + " - " + jv.GetValue<float>().ToString();
                        case JsonValueKind.String:
                            return jv.GetPropertyName() + " - " + jv.GetValue<string>().ToString();
                        case JsonValueKind.True:
                            return jv.GetPropertyName() + " - true";
                        case JsonValueKind.False:
                            return jv.GetPropertyName() + " - false";
                        default:
                            return jv.GetPropertyName();
                    }
                }
                else return "INVALID";
            };
            button7.Clicked += () =>{
                Application.RequestStop();
            };
            button.Clicked += () =>{
                MainProc.FileOpens = new OpenDialog(){
                    CanChooseFiles = true,
                    CanChooseDirectories = false,
                    AllowsMultipleSelection = false,
                    AllowedFileTypes = new string[]{
                        "json"
                    }
                };
                Application.Run(MainProc.FileOpens);
                FilePath = MainProc.FileOpens.FilePath.ToString();
                this.label.Text = FilePath;
                if (File.Exists(FilePath)) {
                    rootObject = JsonNode.Parse(File.ReadAllText(FilePath));
                    JsonTree.AddObject(rootObject);
                }
            };
            button3.Clicked += () =>{
                string textToSave = JsonSerializer.Serialize(rootObject,
                    new JsonSerializerOptions(){
                        WriteIndented = true
                    });
                label.Text = "SAVING....";
                if (!String.IsNullOrWhiteSpace(FilePath)) File.WriteAllText(FilePath,textToSave);
                label.Text = FilePath;
            };
            button4.Clicked += () => {
                string textToSave = JsonSerializer.Serialize(rootObject,new JsonSerializerOptions(){
                        WriteIndented = true
                    });
                MainProc.FileSave = new();
                Application.Run(MainProc.FileSave);
                label.Text = "SAVING....";
                if (!String.IsNullOrWhiteSpace(FilePath)) File.WriteAllText(MainProc.FileSave.FilePath.ToString(),textToSave);
                label.Text = FilePath;
            };
            button6.Clicked += () =>{
                JsonNode newone = JsonTree.SelectedObject;
                if (JsonTree.SelectedObject != rootObject){
                    if (JsonTree.GetParent(JsonTree.SelectedObject) is JsonObject jo){
                        try{
                            jo.Add("newitem",newone);
                        }catch{
                            MessageBox.ErrorQuery("ERROR","Already have one","Ok");
                        }
                    }
                }
            };
            button5.Clicked += () =>{
                MainProc.IDB = new();
                Application.Run(MainProc.IDB);
                if (!String.IsNullOrWhiteSpace(MainProc.IDB.returnItemLable.ToString())) 
                    Change(MainProc.IDB.returnItemLable.ToString().ToLable());
                JsonTree.RebuildTree();
            };
            button2.Clicked += () =>{
                if (JsonTree.SelectedObject != rootObject){
                    try{
                        JsonTree.SelectedObject.Parent["newone"] = JsonTree.SelectedObject.DeepClone();
                    }catch{
                        MessageBox.ErrorQuery("ERROR","Already have one","Ok");
                    }
                    JsonTree.RebuildTree();
                }
            };
            button8.Clicked += () =>{
                if (JsonTree.SelectedObject != rootObject){
                    if (JsonTree.SelectedObject is JsonObject jo)
                        jo.Remove(JsonTree.SelectedObject.GetPropertyName());
                    else if (JsonTree.SelectedObject is JsonArray ja)
                        ja.Remove(JsonTree.SelectedObject.GetPropertyName());
                    else if (JsonTree.SelectedObject is JsonValue jv)
                        jv.Parent[jv.GetPropertyName()] = null;
                }
            };
            JsonTree.ObjectActivated += (a) =>{
                if (JsonTree.SelectedObject != rootObject){
                    InputDialog k = new("");
                    Application.Run(k);
                    if (!String.IsNullOrWhiteSpace(k.inputstring)) Change(k.inputstring);
                    JsonTree.RebuildTree();
                }
            };
        }
        private void Change(string k){
            if (JsonTree.SelectedObject != rootObject && JsonTree.SelectedObject is not JsonValue){
                if (JsonTree.SelectedObject.Parent is JsonObject jo){
                    JsonNode l = JsonTree.SelectedObject;
                    jo.Remove(JsonTree.SelectedObject.GetPropertyName());
                    jo.Add(k,l);
                }
                else if (JsonTree.SelectedObject.Parent is JsonArray ja){
                    JsonNode l = JsonTree.SelectedObject;
                    ja.Remove(JsonTree.SelectedObject.GetPropertyName());
                    ja[k] = l.GetValue<JsonNode>();//不是JsonValue，直接扒Node
                }
            }
            else if (JsonTree.SelectedObject is JsonValue jv){
                if (MessageBox.Query("Question","What need to change?","Key","Value") == 0){
                    jv.Parent[k] = jv.DeepClone();
                    if (JsonTree.SelectedObject.Parent is JsonArray ja){
                        ja.Remove(jv.GetPropertyName());
                    }else if (JsonTree.SelectedObject.Parent is JsonObject jo){
                        jo.Remove(jv.GetPropertyName());
                    } //删掉原值，这里会不会出bug？？
                }
                else{
                    switch(JsonTree.SelectedObject.GetValueKind()){//判断并改值
                        case JsonValueKind.Number:
                            try{
                                JsonTree.SelectedObject.Parent[jv.GetPropertyName()] = float.Parse(k);
                            }catch{
                                MessageBox.ErrorQuery("ERROR","BADFORMAT:" + k,"OK");
                            }
                            break;
                        case JsonValueKind.String:
                            JsonTree.SelectedObject.Parent[jv.GetPropertyName()] = k;
                            break;
                        case JsonValueKind.True:
                            JsonTree.SelectedObject.Parent[jv.GetPropertyName()] = false;
                            break;
                        case JsonValueKind.False:
                            JsonTree.SelectedObject.Parent[jv.GetPropertyName()] = true;
                            break;
                        case JsonValueKind.Null:
                            break;//别忘
                        default:
                            JsonTree.SelectedObject.Parent[jv.GetPropertyName()] = null;
                            break;
                    }
                }
            }
        }
        private class JsonNodeTreeBuilder : ITreeBuilder<JsonNode>
        {
            public bool CanExpand(JsonNode a){
                int k = 0;
                if (a is JsonObject ob){
                    k = ob.Count;
                }else if (a is JsonArray oa){
                    k = oa.Count;
                }else if (a is JsonValue ov){
                    if (ov.GetValueKind() == JsonValueKind.Object) k = 1;
                }
                return (k != 0);
            } 
            public IEnumerable<JsonNode> GetChildren(JsonNode a){
                List<JsonNode> ret = new();
                if (a is JsonObject ob){
                    foreach(var k in ob){
                        ret.Add(k.Value);
                    }
                    return ret;
                }else if (a is JsonArray oa){
                    foreach(var k in oa){
                        ret.Add(k);
                    }
                    return ret;
                }else if (a is JsonValue ov){
                    if (ov.GetValueKind() == JsonValueKind.Object)
                        ret.Add(ov.GetValue<JsonObject>());
                    return ret;
                }
                else return Enumerable.Empty<JsonNode>();
            }
            public bool SupportsCanExpand => true;//需要改？
        }
    }
}
